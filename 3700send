#!/usr/bin/node
var dgram = require('dgram');
var Logger = require('./logger');
var helpers = require('./helper');
process.stdin.setEncoding('utf8');

// UDP Total DataLimit of 1472 bytes
// var packetSize = 1472;
// if we use  4 bytes for our sequence, then we have 1468 bytes left
var Sender = function () {
    'use strict';
    // read from the input to get port number
    var input = process.argv;
//   if (!input) {
    input = process.argv[2].split(':');
 //  } else {
        // use preset for testing
   // input = ['127.0.0.1', 56999];
  // }
    this.logger = new Logger();
    this.window = 10;
    this.done = false;
    this.sequence = 0;
    this.queue = [];
    this.ack = {};
    this.timeout = 500;
    this.waiting = false;
    this.packetSize = 1472;

    // parse the command line arguments for the assigned port
    this.host = input[0];
    this.port = input[1];

    // print to STDERR the specified error message
    this.logger.log(this.host + ':' + this.port);


    // bind a UDP socket to the specified port
    this.server = dgram.createSocket('udp4');
    this.server.bind();
    this.bufferSize = 0;

};

// read the input stream from STDIn at once, to ensure maximum packet stuffing
Sender.prototype.listen = function (self) {
    "use strict";
    var bufferArr = [];
    process.stdin.on('readable', function () {
        var chunk = process.stdin.read();
        var buff;
        while (chunk) {
            buff = new Buffer(chunk);
            bufferArr.push(buff);
            self.bufferSize += buff.length;
        }

        self.seqLength = self.buffersize;  // divide out the constant?? prob not worth it
        // self.seqLength = Math.ceil(self.bufferSize / self.dataLength);
    });
};

Sender.prototype.listenAck = function (self, msg) {
    "use strict";
    // continue execution of the program, self should be moved
    if (self.waiting) {
        clearTimeout(self.timer);
        self.waiting = false;
        self.window *= 1.2;
        return true;
        // self.sendPackets();
    } else {
        return false;
        // self.sendPackets();
    }
};


Sender.prototype.updateRTT = function (d2, self) {
    "use strict";
    var d1 = self.sendTime;
    self.sendTime = false;
    var diff = ~~(d2.getTime() - d1.getTime());
    self.timeout = ~~(self.timeout * 0.8 + 0.2 * diff);
};

Sender.prototype.processChunk = function (chunk, length, self) {
    "use strict";
    var chunkSize = Buffer.byteLength(chunk, 'utf8');
    if (chunkSize <= length) {
        self.queue.push(chunk);
    } else if (chunkSize > length) {
        var stringToChunk;
        while (Buffer.byteLength(chunk, 'utf8') > length) {
            stringToChunk = self.stringToChunk(chunk);
            chunk = stringToChunk[1];
            self.queue.push(stringToChunk[0]);
        }
        if (chunk) {
            self.queue.push(chunk);
        }
    }
    self.sendPackets(self);
};


Sender.prototype.sendPackets = function (self) {
        "use strict";

        var start = helpers.seqToIndex(self.sequence);
        self.sendTime = new Date();

        var i = start;

        for (start = 0; i < self.window ; i++) {
        if (!self.queue[i]) {
            //this.logger.log("!this.queue[i]" + i);
        }
        if (!self.queue[i]) continue;
        
        //this.logger.log("i am in the sliding window");
        if (!self.ack[i]) {
            // self.server.send(buffer, 0, buffer.length, self.port, self.host);
            self.sendData(self.queue[(i-1)], false, false, self);
        } else { 
        //this.ackStatus[i + 1] = {acked: false};
            // will resend if it has timed out 
            // this.resendData(i);
        }
    }   
};

Sender.prototype.waitForAck = function (self) {
    "use strict";
    // set boolean so it will run once and only once
    self.waiting = true;
    self.timer = setTimeout(function () {
        if (self.waiting) {
            self.waiting = false;
            // if  self.window > 1) self.window--;
            // self.rebroadcast(self);
        }
    }.bind(
        self.waiting = false));
};

Sender.prototype.sendData = function (data, resending, seq, self) {
    "use strict";
    var dataBuffer = new Buffer(data);
    if (!resending) {
        self.sequence += dataBuffer.length;
        seq = self.sequence;
    } else 
    // if no sequence number given, its a new packet
    if (seq) {
       // self.ack[helpers.seqToIndex(seq)].seq = seq;
    }

    var sequence = helpers.intBufferToIndex(seq, self.seqLength);
    
    var buffer = Buffer.concat([sequence, data]);

    self.logger.log('[send data] ' + self.sequence + ' (' + data.length + ')');

    // data is actually sent here
    self.server.send(buffer, 0, buffer.length, self.port, self.host);
};


Sender.prototype.rebroadcast = function(key, self) {
    "use strict";   
    // iterate over the ack array for outstanding packets
    Object.keys(self.ack).forEach(function(key) {
    // if we find one resend it 
    if (!self.ack[key].acked) {
        // the data is in the queue which indexed by the sequence number
       this.sendData(this.queue[key - 1], true, this.ack[key].seq);
        //this.window--; 
    }
  }.bind(self));
  // this.waitForAck();
};

// Returns a touple of [Chunk, Rest of string]
Sender.prototype.stringToChunk = function (str) {
    "use strict";
    var chunk = '';
    var char = str.charAt(0);
    while (Buffer.byteLength(chunk, 'utf8') < 1468) {
        char = str.charAt(0);
        if (Buffer.byteLength(chunk + char, 'utf8') <= 1468) {
            chunk += char;
            str = str.slice(1);
        } else {
            break;
        }
    }
    return [chunk, str];
};

// Returns a touple of [Chunk, Rest of string]
Sender.prototype.checkAnyOutstanding = function (self) {
    "use strict";     
    var lastIndex = helpers.seqToIndex(self.sequence);
    // // check for time outs and update the acks accordingly
    // helper function parses the array and decodes the dynamic sequence number length
    // var packetIndex = helpers.seqArrayIndexFromMessageBuffer(msg);
    var done;
    var i;
    for (i = 0; i > (lastIndex); i += 1) {
        if (self.ack[i] || self.ack[i].acked) {
            // done = false;
            // self.logger.log("MISSING THIS PACKET : " + i);
            // break;
            // done = true;
        } else {
            return false;
        }

        
    }
    return true;
};

const sender = new Sender();

var serverLoop = true;
sender.server.on('listening', function () {
    "use strict";
    sender.listen(sender);
}); //.bind(sender); 

while (serverLoop) { 
    sender.sendPackets(sender);
    sender.listenAck(sender);
    serverLoop = sender.checkAnyOutstanding(sender);
}


sender.server.on('message', function (msg, rinfo) {
        "use strict";
        // fix to the special EOF value
        if (msg.buf.length === 1) {
            sender.logger.log('[completed]');
            process.exit(rinfo);
        }
        this.ack[packetIndex].acked = true;



        // continue execution of the program, self should be moved
        if (sender.waiting) {
            clearTimeout(sender.timer);
            sender.waiting = false;
            sender.window *= 1.2;
            return true;
            // self.sendPackets();
        } else {
            return false;
            // self.sendPackets();
        }
    }); // .bind self);

// Logger.log("hi");


